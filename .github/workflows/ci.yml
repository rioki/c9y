name: CI

on:
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write
  pull-requests: write


env:
  VCPKG_COMMIT: 0ca64b4e1c70fa6d9f53b369b8f3f0843797c20c
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check CMake 
      uses: actions/github-script@v7
      with:
        script: |
          let path = require('path');
          let fs = require('fs').promises;
          let patterns = ['**/c9y/*.cpp', '**/c9y-test/*.cpp', '**/c9y/*.h'];
          let globber = await glob.create(patterns.join('\n'));
          let cmakeContents = await fs.readFile('CMakeLists.txt', 'utf-8');
          for await (let file of globber.globGenerator()) {
            let basename = path.basename(file);
            if (cmakeContents.search(basename) == -1) {
              core.setFailed(`${basename} is missing in CMakeLists.txt`);
            }
          }
  msbuild:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        platform: [x86, x64]
        config: [Debug, Release]
        include:
          - platform: x86
            triplet: x86-windows
          - platform: x64
            triplet: x64-windows
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
        appendedCacheKey: ${{ matrix.triplet }}
    - name: Integrate vcpkg in MSBuild
      shell: 'bash'
      run: vcpkg.exe integrate install
    - name: Build
      run: msbuild /m /p:Configuration=${{matrix.config}} /property:Platform=${{matrix.platform}} c9y.sln
    - name: Test
      continue-on-error: true
      run: ${{matrix.platform}}/${{matrix.config}}/c9y-test.exe
  cmake:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        triplet: [x86-windows, x64-windows, x64-linux, x64-macos]
        include:
          - triplet: x86-windows
            system: windows-latest
          - triplet: x64-windows
            system: windows-latest
          - triplet: x64-linux
            system: ubuntu-latest
          - triplet: x64-macos
            system: macos-latest
    runs-on: ${{ matrix.system }}
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install CMake
      uses: lukka/get-cmake@latest
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
        appendedCacheKey: ${{ matrix.triplet }}
    - name: Build
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'ninja-test'
        buildPreset: 'ninja-test'
        testPreset: 'ninja-test'
  review:
    runs-on: ubuntu-latest
    name: GPT-4 Code Review
    needs: [msbuild, cmake]
    steps:
      - name: 'Set PR Fetch Depth'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}
      - name: Custom Code Review and Comment
        uses: actions/github-script@v7
        env:
          CUSTOM_PROMPT: 'You are running in a github pull request and given a diff to review.\n1. Summerize the changes.\n2. If you find any code smells and flaws, please point them out with relevant code snipets. If the code is ok, a simple nothing to report is finde.\n3. Sugest a git commit comment based on the summery of the changes.\n\nHere is the diff:\n\n'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            (async () => {
              const { execSync } = require('child_process');
              const customPrompt = process.env.CUSTOM_PROMPT;
              
              // Fetch diff based on the file pattern
              const diff = execSync(`git diff ${{ github.event.pull_request.base.sha }}  HEAD`).toString();
              
              // Request GPT-4 review
              const prompt     = `${customPrompt} ${diff}`;

              const payload = {
                model: 'gpt-4o-mini',
                messages: [
                  {
                    role: 'user',
                    content: prompt
                  }
                ]
              };
              try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(payload)
                });
                if (response.ok) {
                  const responseData = await response.json();
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    review_id: 1,
                    event: 'COMMENT',
                    body: responseData.choices[0].message.content
                  })                                
                } else {
                  console.error('Failed to get review:', await response.text());
                }
              } catch (error) {
                console.error('An error occurred:', error);
              }
            })();
